{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Создайте случайный FloatTensor размера 3x4x5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[ 4.7429e-01, -1.0658e+00,  1.0146e+00, -2.0688e-01, -1.1791e+00],\n",
      "         [-1.3121e+00, -7.6781e-01, -1.3663e+00, -4.4319e-04,  1.0323e+00],\n",
      "         [-3.3627e-01,  9.3556e-01,  1.1224e+00,  7.3704e-01,  2.2570e-01],\n",
      "         [-1.9232e-01, -6.2589e-01, -6.4006e-01,  1.6805e+00,  3.4094e-01]],\n",
      "\n",
      "        [[ 1.4399e+00, -8.7052e-01, -8.2289e-01, -2.3141e-01, -7.3315e-01],\n",
      "         [ 4.6813e-01, -4.9175e-01,  8.4534e-01, -1.8827e-01, -1.8502e+00],\n",
      "         [ 7.2745e-01, -1.1267e+00,  1.7916e+00,  8.4148e-01,  1.9197e+00],\n",
      "         [ 6.8645e-01, -9.7029e-02, -5.9439e-01, -6.7638e-02,  7.0788e-01]],\n",
      "\n",
      "        [[ 9.3603e-01, -3.1166e-01,  7.5846e-01,  1.0840e-01,  4.2255e-01],\n",
      "         [-5.1696e-01,  7.1022e-01, -2.3958e+00, -1.8660e-01,  1.2706e+00],\n",
      "         [ 8.7943e-02, -8.7225e-01, -4.1027e-01,  5.3428e-01, -5.4110e-01],\n",
      "         [ 8.7260e-01,  5.9883e-01, -3.5639e-01,  1.2072e-01,  8.0156e-01]]])\n"
     ]
    }
   ],
   "source": [
    "tensor = torch.randn(3, 4, 5)\n",
    "print(tensor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Выведите его форму (shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3, 4, 5])\n"
     ]
    }
   ],
   "source": [
    "print(tensor.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Приведите его к форме 6 X 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 4.7429e-01, -1.0658e+00,  1.0146e+00, -2.0688e-01, -1.1791e+00,\n",
      "         -1.3121e+00, -7.6781e-01, -1.3663e+00, -4.4319e-04,  1.0323e+00],\n",
      "        [-3.3627e-01,  9.3556e-01,  1.1224e+00,  7.3704e-01,  2.2570e-01,\n",
      "         -1.9232e-01, -6.2589e-01, -6.4006e-01,  1.6805e+00,  3.4094e-01],\n",
      "        [ 1.4399e+00, -8.7052e-01, -8.2289e-01, -2.3141e-01, -7.3315e-01,\n",
      "          4.6813e-01, -4.9175e-01,  8.4534e-01, -1.8827e-01, -1.8502e+00],\n",
      "        [ 7.2745e-01, -1.1267e+00,  1.7916e+00,  8.4148e-01,  1.9197e+00,\n",
      "          6.8645e-01, -9.7029e-02, -5.9439e-01, -6.7638e-02,  7.0788e-01],\n",
      "        [ 9.3603e-01, -3.1166e-01,  7.5846e-01,  1.0840e-01,  4.2255e-01,\n",
      "         -5.1696e-01,  7.1022e-01, -2.3958e+00, -1.8660e-01,  1.2706e+00],\n",
      "        [ 8.7943e-02, -8.7225e-01, -4.1027e-01,  5.3428e-01, -5.4110e-01,\n",
      "          8.7260e-01,  5.9883e-01, -3.5639e-01,  1.2072e-01,  8.0156e-01]])\n"
     ]
    }
   ],
   "source": [
    "new_tensor = tensor.view(6, 10)\n",
    "\n",
    "print(new_tensor)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Умножьте его на вектор [1, 4, 2, 2, 1] поэлементно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 4.7429e-01, -4.2633e+00,  2.0293e+00, -4.1376e-01, -1.1791e+00,\n",
      "         -1.3121e+00, -3.0712e+00, -2.7325e+00, -8.8638e-04,  1.0323e+00],\n",
      "        [-3.3627e-01,  3.7422e+00,  2.2448e+00,  1.4741e+00,  2.2570e-01,\n",
      "         -1.9232e-01, -2.5036e+00, -1.2801e+00,  3.3610e+00,  3.4094e-01],\n",
      "        [ 1.4399e+00, -3.4821e+00, -1.6458e+00, -4.6282e-01, -7.3315e-01,\n",
      "          4.6813e-01, -1.9670e+00,  1.6907e+00, -3.7654e-01, -1.8502e+00],\n",
      "        [ 7.2745e-01, -4.5069e+00,  3.5832e+00,  1.6830e+00,  1.9197e+00,\n",
      "          6.8645e-01, -3.8812e-01, -1.1888e+00, -1.3528e-01,  7.0788e-01],\n",
      "        [ 9.3603e-01, -1.2466e+00,  1.5169e+00,  2.1680e-01,  4.2255e-01,\n",
      "         -5.1696e-01,  2.8409e+00, -4.7917e+00, -3.7320e-01,  1.2706e+00],\n",
      "        [ 8.7943e-02, -3.4890e+00, -8.2055e-01,  1.0686e+00, -5.4110e-01,\n",
      "          8.7260e-01,  2.3953e+00, -7.1278e-01,  2.4144e-01,  8.0156e-01]])\n"
     ]
    }
   ],
   "source": [
    "vector = torch.tensor([1, 4, 2, 2, 1, 1, 4, 2, 2, 1])\n",
    "result = new_tensor * vector\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Умножьте тензор матрично на себя, чтобы результат был размерности 6x6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[ 43.7664,  -0.6463,  12.1420,  28.1411,  14.6076,   7.7207],\n",
      "        [ -0.6463,  40.7367, -17.2834,  -4.0047,  -2.8599, -17.6426],\n",
      "        [ 12.1420, -17.2834,  28.1702,   6.4736, -13.3595,   6.4462],\n",
      "        [ 28.1411,  -4.0047,   6.4736,  42.7521,  18.0994,  14.6593],\n",
      "        [ 14.6076,  -2.8599, -13.3595,  18.0994,  38.0086,  13.8876],\n",
      "        [  7.7207, -17.6426,   6.4462,  14.6593,  13.8876,  21.9966]])\n"
     ]
    }
   ],
   "source": [
    "matrix_result = result.matmul(result.t())\n",
    "\n",
    "print(matrix_result)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Посчитайте производную функции y = x**3 + z - 75t в точке (1, 0.5, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d(y)/d(x) = 3.0\n",
      "d(y)/d(z) = 1.0\n",
      "d(y)/d(t) = -75.0\n"
     ]
    }
   ],
   "source": [
    "x = torch.tensor([1.], requires_grad=True)\n",
    "z = torch.tensor([0.5], requires_grad=True)\n",
    "t = torch.tensor([2.], requires_grad=True)\n",
    "\n",
    "y = x ** 3 + z - 75 * t\n",
    "y.backward()\n",
    "\n",
    "print('d(y)/d(x) =', x.grad.item())\n",
    "print('d(y)/d(z) =', z.grad.item())\n",
    "print('d(y)/d(t) =', t.grad.item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Создайте единичный тензор размера 5x6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[1., 0., 0., 0., 0., 0.],\n",
      "        [0., 1., 0., 0., 0., 0.],\n",
      "        [0., 0., 1., 0., 0., 0.],\n",
      "        [0., 0., 0., 1., 0., 0.],\n",
      "        [0., 0., 0., 0., 1., 0.]])\n"
     ]
    }
   ],
   "source": [
    "tensor = torch.eye(5, 6)\n",
    "print(tensor)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Переведите его в формат numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0. 0.]\n",
      " [0. 0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 0. 1. 0.]]\n"
     ]
    }
   ],
   "source": [
    "numpy_array = tensor.numpy()\n",
    "\n",
    "print(numpy_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Давайте теперь пооптимизируем: возьмите функцию y = x**w1 - 2 * x**2 + 5\n",
    "# Посчитайте "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1, x = 1.96, y = 4.85\n",
      "Iteration 2, x = 1.92, y = 4.72\n",
      "Iteration 3, x = 1.89, y = 4.60\n",
      "Iteration 4, x = 1.86, y = 4.51\n",
      "Iteration 5, x = 1.83, y = 4.43\n",
      "Iteration 6, x = 1.80, y = 4.36\n",
      "Iteration 7, x = 1.78, y = 4.29\n",
      "Iteration 8, x = 1.75, y = 4.24\n",
      "Iteration 9, x = 1.73, y = 4.19\n",
      "Iteration 10, x = 1.71, y = 4.15\n",
      "Iteration 11, x = 1.69, y = 4.12\n",
      "Iteration 12, x = 1.67, y = 4.08\n",
      "Iteration 13, x = 1.66, y = 4.06\n",
      "Iteration 14, x = 1.64, y = 4.03\n",
      "Iteration 15, x = 1.62, y = 4.01\n",
      "Iteration 16, x = 1.61, y = 3.99\n",
      "Iteration 17, x = 1.60, y = 3.97\n",
      "Iteration 18, x = 1.58, y = 3.96\n",
      "Iteration 19, x = 1.57, y = 3.94\n",
      "Iteration 20, x = 1.56, y = 3.93\n",
      "Iteration 21, x = 1.55, y = 3.92\n",
      "Iteration 22, x = 1.54, y = 3.91\n",
      "Iteration 23, x = 1.53, y = 3.90\n",
      "Iteration 24, x = 1.52, y = 3.89\n",
      "Iteration 25, x = 1.51, y = 3.89\n",
      "Iteration 26, x = 1.50, y = 3.88\n",
      "Iteration 27, x = 1.50, y = 3.87\n",
      "Iteration 28, x = 1.49, y = 3.87\n",
      "Iteration 29, x = 1.48, y = 3.86\n",
      "Iteration 30, x = 1.48, y = 3.86\n",
      "Iteration 31, x = 1.47, y = 3.85\n",
      "Iteration 32, x = 1.46, y = 3.85\n",
      "Iteration 33, x = 1.46, y = 3.85\n",
      "Iteration 34, x = 1.45, y = 3.84\n",
      "Iteration 35, x = 1.45, y = 3.84\n",
      "Iteration 36, x = 1.44, y = 3.84\n",
      "Iteration 37, x = 1.44, y = 3.84\n",
      "Iteration 38, x = 1.43, y = 3.84\n",
      "Iteration 39, x = 1.43, y = 3.83\n",
      "Iteration 40, x = 1.42, y = 3.83\n",
      "Iteration 41, x = 1.42, y = 3.83\n",
      "Iteration 42, x = 1.42, y = 3.83\n",
      "Iteration 43, x = 1.41, y = 3.83\n",
      "Iteration 44, x = 1.41, y = 3.83\n",
      "Iteration 45, x = 1.41, y = 3.83\n",
      "Iteration 46, x = 1.40, y = 3.83\n",
      "Iteration 47, x = 1.40, y = 3.82\n",
      "Iteration 48, x = 1.40, y = 3.82\n",
      "Iteration 49, x = 1.40, y = 3.82\n",
      "Iteration 50, x = 1.39, y = 3.82\n",
      "Iteration 51, x = 1.39, y = 3.82\n",
      "Iteration 52, x = 1.39, y = 3.82\n",
      "Iteration 53, x = 1.39, y = 3.82\n",
      "Iteration 54, x = 1.38, y = 3.82\n",
      "Iteration 55, x = 1.38, y = 3.82\n",
      "Iteration 56, x = 1.38, y = 3.82\n",
      "Iteration 57, x = 1.38, y = 3.82\n",
      "Iteration 58, x = 1.38, y = 3.82\n",
      "Iteration 59, x = 1.37, y = 3.82\n",
      "Iteration 60, x = 1.37, y = 3.82\n",
      "Iteration 61, x = 1.37, y = 3.82\n",
      "Iteration 62, x = 1.37, y = 3.82\n",
      "Iteration 63, x = 1.37, y = 3.82\n",
      "Iteration 64, x = 1.37, y = 3.82\n",
      "Iteration 65, x = 1.36, y = 3.82\n",
      "Iteration 66, x = 1.36, y = 3.82\n",
      "Iteration 67, x = 1.36, y = 3.82\n",
      "Iteration 68, x = 1.36, y = 3.82\n",
      "Iteration 69, x = 1.36, y = 3.82\n",
      "Iteration 70, x = 1.36, y = 3.82\n",
      "Iteration 71, x = 1.36, y = 3.82\n",
      "Iteration 72, x = 1.36, y = 3.82\n",
      "Iteration 73, x = 1.36, y = 3.82\n",
      "Iteration 74, x = 1.36, y = 3.82\n",
      "Iteration 75, x = 1.35, y = 3.82\n",
      "Iteration 76, x = 1.35, y = 3.82\n",
      "Iteration 77, x = 1.35, y = 3.82\n",
      "Iteration 78, x = 1.35, y = 3.82\n",
      "Iteration 79, x = 1.35, y = 3.82\n",
      "Iteration 80, x = 1.35, y = 3.82\n",
      "Iteration 81, x = 1.35, y = 3.82\n",
      "Iteration 82, x = 1.35, y = 3.82\n",
      "Iteration 83, x = 1.35, y = 3.82\n",
      "Iteration 84, x = 1.35, y = 3.82\n",
      "Iteration 85, x = 1.35, y = 3.82\n",
      "Iteration 86, x = 1.35, y = 3.82\n",
      "Iteration 87, x = 1.35, y = 3.82\n",
      "Iteration 88, x = 1.35, y = 3.82\n",
      "Iteration 89, x = 1.34, y = 3.82\n",
      "Iteration 90, x = 1.34, y = 3.82\n",
      "Iteration 91, x = 1.34, y = 3.82\n",
      "Iteration 92, x = 1.34, y = 3.82\n",
      "Iteration 93, x = 1.34, y = 3.82\n",
      "Iteration 94, x = 1.34, y = 3.81\n",
      "Iteration 95, x = 1.34, y = 3.81\n",
      "Iteration 96, x = 1.34, y = 3.81\n",
      "Iteration 97, x = 1.34, y = 3.81\n",
      "Iteration 98, x = 1.34, y = 3.81\n",
      "Iteration 99, x = 1.34, y = 3.81\n",
      "Iteration 100, x = 1.34, y = 3.81\n"
     ]
    }
   ],
   "source": [
    "from torch.autograd import Variable\n",
    "\n",
    "# Задаем параметры функции\n",
    "w1 = 3\n",
    "x = Variable(torch.Tensor([2]), requires_grad=True)\n",
    "\n",
    "# Определяем функцию и градиент\n",
    "def function(x, w1):\n",
    "    return x**w1 - 2 * x**2 + 5\n",
    "\n",
    "def gradient(x):\n",
    "    return torch.autograd.grad(function(x, w1), x)[0]\n",
    "\n",
    "# Задаем параметры оптимизации\n",
    "learning_rate = 0.01\n",
    "num_iterations = 100\n",
    "\n",
    "# Применяем градиентный спуск\n",
    "for i in range(num_iterations):\n",
    "    x_grad = gradient(x)\n",
    "    x.data -= learning_rate * x_grad\n",
    "    print(\"Iteration {}, x = {:.2f}, y = {:.2f}\".format(i+1, x.data[0], function(x.data[0], w1)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
